// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customers    Customer[]        @relation("UserCustomers")
  expenses     Expense[]         @relation("UserExpenses")
  invoices     Invoice[]         @relation("UserInvoices")
  cylinderRentals CylinderRental[] @relation("UserCylinderRentals")

  @@map("users")
}

model Customer {
  id          String   @id @default(cuid())
  code        String   @unique
  firstName   String
  lastName    String
  email       String?
  phone       String
  address     String?
  city        String?
  state       String?
  postalCode  String?
  customerType CustomerType
  creditLimit Decimal  @default(0) @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user           User             @relation("UserCustomers", fields: [userId], references: [id])
  userId         String
  ledger         CustomerLedger[]
  cylinderRentals CylinderRental[]
  supportRequests SupportRequest[]

  @@map("customers")
}

model Cylinder {
  id                    String         @id @default(cuid())
  code                  String         @unique
  cylinderType          CylinderType
  capacity              Decimal        @db.Decimal(5, 2)
  purchaseDate          DateTime?
  purchasePrice         Decimal?       @db.Decimal(10, 2)
  currentStatus         CylinderStatus @default(AVAILABLE)
  location              String?
  lastMaintenanceDate   DateTime?
  nextMaintenanceDate   DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  // Relations
  cylinderRentals CylinderRental[]

  @@map("cylinders")
}

model CustomerLedger {
  id              String           @id @default(cuid())
  customer        Customer         @relation(fields: [customerId], references: [id])
  customerId      String
  transactionType TransactionType
  amount          Decimal          @db.Decimal(10, 2)
  balanceBefore   Decimal          @db.Decimal(10, 2)
  balanceAfter    Decimal          @db.Decimal(10, 2)
  description     String?
  invoiceId       String?
  createdAt       DateTime         @default(now())

  @@map("customer_ledger")
}

model CylinderRental {
  id                String    @id @default(cuid())
  customer          Customer  @relation(fields: [customerId], references: [id])
  customerId        String
  cylinder          Cylinder  @relation(fields: [cylinderId], references: [id])
  cylinderId        String
  user              User      @relation("UserCylinderRentals", fields: [userId], references: [id])
  userId            String
  rentalDate        DateTime
  expectedReturnDate DateTime?
  actualReturnDate  DateTime?
  rentalAmount      Decimal?  @db.Decimal(10, 2)
  depositAmount     Decimal?  @db.Decimal(10, 2)
  status            RentalStatus @default(ACTIVE)
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("cylinder_rentals")
}

model Expense {
  id          String       @id @default(cuid())
  category    ExpenseCategory
  amount      Decimal      @db.Decimal(10, 2)
  description String?
  expenseDate DateTime
  receiptUrl  String?
  user        User         @relation("UserExpenses", fields: [userId], references: [id])
  userId      String
  createdAt   DateTime     @default(now())

  @@map("expenses")
}

model Vendor {
  id            String   @id @default(cuid())
  vendorCode    String   @unique
  companyName   String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  taxId         String?
  paymentTerms  Int      @default(30)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  invoices Invoice[]
  orders    VendorOrder[]
  supportRequests VendorSupportRequest[]

  @@map("vendors")
}

model Invoice {
  id            String      @id @default(cuid())
  invoiceNumber String      @unique
  customerId    String?
  vendorId      String?
  invoiceType   InvoiceType
  totalAmount   Decimal     @db.Decimal(10, 2)
  taxAmount     Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount Decimal    @default(0) @db.Decimal(10, 2)
  finalAmount   Decimal     @db.Decimal(10, 2)
  status        InvoiceStatus @default(DRAFT)
  dueDate       DateTime?
  paidDate      DateTime?
  notes         String?
  user          User        @relation("UserInvoices", fields: [userId], references: [id])
  userId        String
  vendor        Vendor?     @relation(fields: [vendorId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("invoices")
}

model SupportRequest {
  id          String   @id @default(cuid())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  subject     String
  description String
  status      SupportRequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("support_requests")
}

model VendorOrder {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  orderDate   DateTime @default(now())
  status      VendorOrderStatus @default(PENDING)
  totalAmount Decimal  @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("vendor_orders")
}

enum VendorOrderStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model VendorSupportRequest {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  subject     String
  description String
  status      SupportRequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("vendor_support_requests")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  VENDOR
}

enum CustomerType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
}

enum CylinderType {
  KG_15
  KG_45
}

enum CylinderStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  RETIRED
}

enum TransactionType {
  SALE
  PAYMENT
  REFUND
  ADJUSTMENT
}

enum RentalStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

enum ExpenseCategory {
  SALARY
  FUEL
  MEALS
  MAINTENANCE
  UTILITIES
  OTHER
}

enum InvoiceType {
  SALE
  PURCHASE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}

enum SupportRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
} 