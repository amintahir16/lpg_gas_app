generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String?
  password         String
  role             Role              @default(USER)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  b2b_transactions B2BTransaction[]
  cylinderRentals  CylinderRental[]  @relation("UserCylinderRentals")
  dailyPlantPrices DailyPlantPrice[]
  expenses         Expense[]         @relation("UserExpenses")
  invoices         Invoice[]         @relation("UserInvoices")
  notifications    Notification[]    @relation("UserNotifications")
  purchaseEntries  PurchaseEntry[]   @relation("UserPurchaseEntries")

  @@map("users")
}

model Customer {
  id                 String           @id @default(cuid())
  name               String
  type               String           @default("B2B")
  contactPerson      String
  phone              String
  email              String?
  address            String?
  creditLimit        Decimal?         @db.Decimal(15, 2)
  paymentTermsDays   Int              @default(30)
  ledgerBalance      Decimal          @default(0) @db.Decimal(15, 2)
  domestic118kgDue   Int              @default(0)
  standard15kgDue    Int              @default(0)
  commercial454kgDue Int              @default(0)
  notes              String?
  isActive           Boolean          @default(true)
  createdBy          String
  createdAt          DateTime         @default(now())
  updatedBy          String?
  updatedAt          DateTime         @updatedAt
  marginCategoryId   String?
  b2bTransactions    B2BTransaction[]
  ledger             CustomerLedger[]
  marginCategory     MarginCategory?  @relation(fields: [marginCategoryId], references: [id])
  cylinderRentals    CylinderRental[]
  supportRequests    SupportRequest[]

  @@map("customers")
}

model B2CCustomer {
  id               String               @id @default(cuid())
  name             String
  phone            String
  email            String?
  address          String
  houseNumber      String?
  sector           String?
  street           String?
  phase            String?
  area             String?
  city             String               @default("Hayatabad")
  totalProfit      Decimal              @default(0) @db.Decimal(10, 2)
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  marginCategoryId String?
  marginCategory   MarginCategory?      @relation(fields: [marginCategoryId], references: [id])
  cylinderHoldings B2CCylinderHolding[]
  transactions     B2CTransaction[]

  @@map("b2c_customers")
}

model B2CCylinderHolding {
  id              String       @id @default(cuid())
  customerId      String
  cylinderType    CylinderType
  quantity        Int          @default(1)
  securityAmount  Decimal      @db.Decimal(10, 2)
  issueDate       DateTime     @default(now())
  returnDate      DateTime?
  isReturned      Boolean      @default(false)
  returnDeduction Decimal      @default(0) @db.Decimal(10, 2)
  customer        B2CCustomer  @relation(fields: [customerId], references: [id])

  @@map("b2c_cylinder_holdings")
}

model B2CTransaction {
  id             String                        @id @default(cuid())
  billSno        String                        @unique
  customerId     String
  date           DateTime
  time           DateTime
  totalAmount    Decimal                       @db.Decimal(10, 2)
  notes          String?
  createdBy      String
  createdAt      DateTime                      @default(now())
  voided         Boolean                       @default(false)
  voidedBy       String?
  voidedAt       DateTime?
  voidReason     String?
  accessoryItems B2CTransactionAccessoryItem[]
  gasItems       B2CTransactionGasItem[]
  securityItems  B2CTransactionSecurityItem[]
  customer       B2CCustomer                   @relation(fields: [customerId], references: [id])

  @@map("b2c_transactions")
}

model B2CTransactionGasItem {
  id            String         @id @default(cuid())
  transactionId String
  cylinderType  CylinderType
  quantity      Int
  pricePerItem  Decimal        @db.Decimal(10, 2)
  totalPrice    Decimal        @db.Decimal(10, 2)
  transaction   B2CTransaction @relation(fields: [transactionId], references: [id])

  @@map("b2c_transaction_gas_items")
}

model B2CTransactionSecurityItem {
  id            String         @id @default(cuid())
  transactionId String
  cylinderType  CylinderType
  quantity      Int
  pricePerItem  Decimal        @db.Decimal(10, 2)
  totalPrice    Decimal        @db.Decimal(10, 2)
  isReturn      Boolean        @default(false)
  transaction   B2CTransaction @relation(fields: [transactionId], references: [id])

  @@map("b2c_transaction_security_items")
}

model B2CTransactionAccessoryItem {
  id            String         @id @default(cuid())
  transactionId String
  productName   String
  quantity      Int
  pricePerItem  Decimal        @db.Decimal(10, 2)
  totalPrice    Decimal        @db.Decimal(10, 2)
  transaction   B2CTransaction @relation(fields: [transactionId], references: [id])

  @@map("b2c_transaction_accessory_items")
}

model MarginCategory {
  id           String        @id @default(cuid())
  name         String        @unique
  customerType String
  marginPerKg  Decimal       @db.Decimal(10, 2)
  description  String?
  isActive     Boolean       @default(true)
  sortOrder    Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  b2cCustomers B2CCustomer[]
  b2bCustomers Customer[]

  @@map("margin_categories")
}

model DailyPlantPrice {
  id              String   @id @default(cuid())
  date            DateTime @unique
  plantPrice118kg Decimal  @db.Decimal(10, 2)
  notes           String?
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdByUser   User     @relation(fields: [createdBy], references: [id])

  @@map("daily_plant_prices")
}

model VendorCategoryConfig {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vendors     Vendor[]

  @@map("vendor_category_configs")
}

model Cylinder {
  id                  String            @id @default(cuid())
  code                String            @unique
  cylinderType        CylinderType
  capacity            Decimal           @db.Decimal(5, 2)
  purchaseDate        DateTime?
  purchasePrice       Decimal?          @db.Decimal(10, 2)
  currentStatus       CylinderStatus    @default(FULL)
  location            String?
  lastMaintenanceDate DateTime?
  nextMaintenanceDate DateTime?
  storeId             String?
  vehicleId           String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  cylinderRentals     CylinderRental[]
  store               Store?            @relation(fields: [storeId], references: [id])
  vehicle             Vehicle?          @relation(fields: [vehicleId], references: [id])
  vendorInventories   VendorInventory[]

  @@map("cylinders")
}

model CustomerLedger {
  id              String          @id @default(cuid())
  customerId      String
  transactionType TransactionType
  amount          Decimal         @db.Decimal(10, 2)
  balanceBefore   Decimal         @db.Decimal(10, 2)
  balanceAfter    Decimal         @db.Decimal(10, 2)
  description     String?
  invoiceId       String?
  createdAt       DateTime        @default(now())
  customer        Customer        @relation(fields: [customerId], references: [id])

  @@map("customer_ledger")
}

model CylinderRental {
  id                 String       @id @default(cuid())
  customerId         String
  cylinderId         String
  userId             String
  rentalDate         DateTime
  expectedReturnDate DateTime?
  actualReturnDate   DateTime?
  rentalAmount       Decimal?     @db.Decimal(10, 2)
  depositAmount      Decimal?     @db.Decimal(10, 2)
  status             RentalStatus @default(ACTIVE)
  notes              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  customer           Customer     @relation(fields: [customerId], references: [id])
  cylinder           Cylinder     @relation(fields: [cylinderId], references: [id])
  user               User         @relation("UserCylinderRentals", fields: [userId], references: [id])

  @@map("cylinder_rentals")
}

model Expense {
  id          String          @id @default(cuid())
  category    ExpenseCategory
  amount      Decimal         @db.Decimal(10, 2)
  description String
  expenseDate DateTime
  receiptUrl  String?
  status      ExpenseStatus   @default(PENDING)
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  user        User            @relation("UserExpenses", fields: [userId], references: [id])

  @@map("expenses")
}

model Vendor {
  id               String                  @id @default(cuid())
  vendorCode       String                  @unique
  companyName      String
  contactPerson    String?
  email            String?
  phone            String?
  address          String?
  taxId            String?
  paymentTerms     Int                     @default(30)
  isActive         Boolean                 @default(true)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  categoryId       String?
  invoices         Invoice[]
  purchase_entries PurchaseEntry[]
  bankDetails      VendorBankDetails[]
  financialReports VendorFinancialReport[]
  inventories      VendorInventory[]
  orders           VendorOrder[]
  payments         VendorPayment[]
  supportRequests  VendorSupportRequest[]
  category         VendorCategoryConfig?   @relation(fields: [categoryId], references: [id])

  @@map("vendors")
}

model VendorBankDetails {
  id            String   @id @default(cuid())
  vendorId      String
  accountName   String
  accountNumber String
  bankName      String
  swiftCode     String?
  routingNumber String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  vendor        Vendor   @relation(fields: [vendorId], references: [id])

  @@map("vendor_bank_details")
}

model VendorInventory {
  id          String          @id @default(cuid())
  vendorId    String
  cylinderId  String?
  name        String
  category    String
  quantity    Int             @default(1)
  unitPrice   Decimal         @db.Decimal(10, 2)
  status      InventoryStatus @default(IN_STOCK)
  description String?
  lastUpdated DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  cylinder    Cylinder?       @relation(fields: [cylinderId], references: [id])
  vendor      Vendor          @relation(fields: [vendorId], references: [id])

  @@map("vendor_inventories")
}

model VendorPayment {
  id          String        @id @default(cuid())
  vendorId    String
  amount      Decimal       @db.Decimal(10, 2)
  paymentDate DateTime
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  reference   String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  vendor      Vendor        @relation(fields: [vendorId], references: [id])

  @@map("vendor_payments")
}

model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @unique
  customerId     String?
  vendorId       String?
  invoiceType    InvoiceType
  totalAmount    Decimal       @db.Decimal(15, 2)
  taxAmount      Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount Decimal       @default(0) @db.Decimal(10, 2)
  finalAmount    Decimal       @db.Decimal(10, 2)
  status         InvoiceStatus @default(DRAFT)
  dueDate        DateTime?
  paidDate       DateTime?
  notes          String?
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation("UserInvoices", fields: [userId], references: [id])
  vendor         Vendor?       @relation(fields: [vendorId], references: [id])

  @@map("invoices")
}

model SupportRequest {
  id          String               @id @default(cuid())
  customerId  String
  subject     String
  description String
  status      SupportRequestStatus @default(PENDING)
  priority    SupportPriority      @default(MEDIUM)
  category    SupportCategory      @default(GENERAL)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  customer    Customer             @relation(fields: [customerId], references: [id])

  @@map("support_requests")
}

model VendorOrder {
  id          String            @id @default(cuid())
  vendorId    String
  orderDate   DateTime          @default(now())
  status      VendorOrderStatus @default(PENDING)
  totalAmount Decimal           @db.Decimal(15, 2)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  vendor      Vendor            @relation(fields: [vendorId], references: [id])

  @@map("vendor_orders")
}

model VendorSupportRequest {
  id          String               @id @default(cuid())
  vendorId    String
  subject     String
  description String
  status      SupportRequestStatus @default(PENDING)
  priority    SupportPriority      @default(MEDIUM)
  category    SupportCategory      @default(GENERAL)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  vendor      Vendor               @relation(fields: [vendorId], references: [id])

  @@map("vendor_support_requests")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("GENERAL")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model Notification {
  id        String               @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean              @default(false)
  priority  NotificationPriority @default(MEDIUM)
  metadata  String?
  userId    String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  user      User?                @relation("UserNotifications", fields: [userId], references: [id])

  @@map("notifications")
}

model PurchaseEntry {
  id              String              @id @default(cuid())
  vendorId        String
  category        VendorCategory
  itemName        String
  itemDescription String?
  quantity        Int                 @default(1)
  unitPrice       Decimal             @db.Decimal(10, 2)
  totalPrice      Decimal             @db.Decimal(10, 2)
  status          PurchaseEntryStatus @default(PENDING)
  purchaseDate    DateTime            @default(now())
  invoiceNumber   String?
  notes           String?
  userId          String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation("UserPurchaseEntries", fields: [userId], references: [id])
  vendors         Vendor              @relation(fields: [vendorId], references: [id])

  @@map("purchase_entries")
}

model VendorFinancialReport {
  id              String   @id @default(cuid())
  vendorId        String
  reportDate      DateTime
  netBalance      Decimal  @db.Decimal(10, 2)
  cashIn          Decimal  @default(0) @db.Decimal(10, 2)
  cashOut         Decimal  @default(0) @db.Decimal(10, 2)
  previousBalance Decimal  @default(0) @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  vendor          Vendor   @relation(fields: [vendorId], references: [id])

  @@unique([vendorId, reportDate])
  @@map("vendor_financial_reports")
}

model Store {
  id        String     @id @default(cuid())
  name      String
  location  String
  address   String?
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cylinders Cylinder[]

  @@map("stores")
}

model Vehicle {
  id            String     @id @default(cuid())
  vehicleNumber String     @unique
  vehicleType   String
  driverName    String?
  capacity      Int?
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  cylinders     Cylinder[]

  @@map("vehicles")
}

// Old hardcoded inventory models removed - now using dynamic CustomItem system
// These models are deprecated: Regulator, GasPipe, Stove, Valve
// All inventory is now managed through the CustomItem model

model CustomItem {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  costPerPiece Decimal  @db.Decimal(10, 2)
  isActive     Boolean  @default(true)
  name         String
  quantity     Int      @default(0)
  totalCost    Decimal  @db.Decimal(10, 2)
  type         String

  @@map("custom_items")
}

// InventoryCategory model removed - categories are now managed dynamically through CustomItem.name

model B2BTransaction {
  id               String               @id @default(cuid())
  transactionType  B2BTransactionType
  billSno          String               @unique
  customerId       String
  date             DateTime
  time             DateTime
  totalAmount      Decimal              @db.Decimal(10, 2)
  paymentReference String?
  notes            String?
  createdBy        String
  createdAt        DateTime             @default(now())
  voided           Boolean              @default(false)
  voidedBy         String?
  voidedAt         DateTime?
  voidReason       String?
  items            B2BTransactionItem[]
  users            User                 @relation(fields: [createdBy], references: [id])
  customer         Customer             @relation(fields: [customerId], references: [id])

  @@map("b2b_transactions")
}

model B2BTransactionItem {
  id                  String           @id @default(cuid())
  transactionId       String
  productId           String?
  productName         String
  quantity            Decimal          @db.Decimal(10, 2)
  pricePerItem        Decimal          @db.Decimal(10, 2)
  totalPrice          Decimal          @db.Decimal(15, 2)
  cylinderType        String?
  returnedCondition   ReturnCondition?
  remainingKg         Decimal?         @db.Decimal(5, 2)
  originalSoldPrice   Decimal?         @db.Decimal(10, 2)
  buybackRate         Decimal?         @db.Decimal(3, 2)
  buybackPricePerItem Decimal?         @db.Decimal(10, 2)
  buybackTotal        Decimal?         @db.Decimal(10, 2)
  products            Product?         @relation(fields: [productId], references: [id])
  transaction         B2BTransaction   @relation(fields: [transactionId], references: [id])

  @@map("b2b_transaction_items")
}

model Product {
  id                    String               @id @default(cuid())
  name                  String
  category              ProductCategory
  unit                  String
  stockQuantity         Decimal              @default(0) @db.Decimal(10, 2)
  stockType             StockType            @default(FILLED)
  remainingKg           Decimal?             @db.Decimal(5, 2)
  priceSoldToCustomer   Decimal              @db.Decimal(10, 2)
  lowStockThreshold     Int                  @default(10)
  isActive              Boolean              @default(true)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  b2b_transaction_items B2BTransactionItem[]

  @@map("products")
}

model BillSequence {
  id        String   @id @default(cuid())
  date      DateTime @unique
  sequence  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bill_sequences")
}

enum VendorOrderStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  CHECK
  CREDIT_CARD
  DEBIT_CARD
  WIRE_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportCategory {
  GENERAL
  TECHNICAL
  BILLING
  DELIVERY
  SAFETY
  MAINTENANCE
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  VENDOR
}

enum CustomerType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  GOVERNMENT
}

enum CylinderType {
  DOMESTIC_11_8KG
  STANDARD_15KG
  COMMERCIAL_45_4KG
}

enum CylinderStatus {
  FULL
  EMPTY
  MAINTENANCE
  RETIRED
  WITH_CUSTOMER
}

enum TransactionType {
  SALE
  PAYMENT
  REFUND
  ADJUSTMENT
}

enum RentalStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

enum ExpenseCategory {
  SALARY
  FUEL
  MEALS
  MAINTENANCE
  UTILITIES
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum B2BTransactionType {
  SALE
  PAYMENT
  BUYBACK
  RETURN_EMPTY
  ADJUSTMENT
  CREDIT_NOTE
}

enum ReturnCondition {
  EMPTY
  PARTIAL
  FULL
}

enum ProductCategory {
  GAS_CYLINDER
  ACCESSORY
}

enum StockType {
  FILLED
  EMPTY
  PARTIAL
}

enum InvoiceType {
  SALE
  PURCHASE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  CANCELLED
}

enum SupportRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
  CLOSED
}

enum VendorCategory {
  CYLINDER_PURCHASE
  GAS_PURCHASE
  VAPORIZER_PURCHASE
  ACCESSORIES_PURCHASE
  VALVES_PURCHASE
}

enum PurchaseEntryStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  PAID
  PARTIAL
}

enum NotificationType {
  CYLINDER_ADDED
  CYLINDER_UPDATED
  CYLINDER_DELETED
  CYLINDER_STATUS_CHANGED
  VENDOR_ADDED
  VENDOR_UPDATED
  VENDOR_DELETED
  VENDOR_STATUS_CHANGED
  CUSTOMER_ADDED
  CUSTOMER_UPDATED
  CUSTOMER_DELETED
  CUSTOMER_STATUS_CHANGED
  EXPENSE_ADDED
  EXPENSE_UPDATED
  EXPENSE_DELETED
  EXPENSE_STATUS_CHANGED
  PAYMENT_RECEIVED
  PAYMENT_UPDATED
  PAYMENT_DELETED
  RENTAL_CREATED
  RENTAL_UPDATED
  RENTAL_COMPLETED
  LOW_INVENTORY
  MAINTENANCE_DUE
  SYSTEM_ALERT
  USER_ACTIVITY
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
